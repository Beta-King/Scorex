package scorex.block

import io.circe.Json
import scorex.consensus.ConsensusModule
import scorex.serialization.{BytesSerializable, JsonSerializable}
import scorex.transaction.box.proposition.Proposition
import scorex.transaction.{Transaction, TransactionalModule}
import scorex.utils.ScorexLogging
import scala.util.Try

/**
  * A block is an atomic piece of data network participates are agreed on.
  *
  * A block has:
  * - transactions data: a sequence of transactions, where a transaction is an atomic state update.
  * Some metadata is possible as well(transactions Merkle tree root, state Merkle tree root etc).
  *
  * - consensus data to check whether block was generated by a right party in a right way. E.g.
  * "baseTarget" & "generatorSignature" fields in the Nxt block structure, nonce & difficulty in the
  * Bitcoin block structure.
  *
  * - a signature(s) of a block generator(s)
  *
  * - additional data: block structure version no, timestamp etc
  */

class Block[P <: Proposition, TData <: TransactionalData[_ <: Transaction[P, _]], CData <: ConsensusData](
                                                                                      val version: Byte,
                                                                                      val timestamp: Long,
                                                                                      val consensusData: CData,
                                                                                      val transactionalData: TData)
  extends BytesSerializable with JsonSerializable {

  type TDataExposed = TData
  type BlockId = ConsensusData.BlockId

  lazy val bytes: Array[Byte] = ???

  lazy val json: Json = ???

  /*lazy val json =
    versionField.json ++
      timestampField.json ++
      consensusDataField.json ++
      transactionDataField.json ++
      Json.obj(
        "fee" -> consensusModule.totalFee(this),
        "blocksize" -> bytes.length
      )*/
}

object Block extends ScorexLogging {
  val Version = 1: Byte

  def parse[P <: Proposition, TX <: Transaction[P, TX], TData <: TransactionalData[TX], CData <: ConsensusData]
  (bytes: Array[Byte])
  (implicit consensusModule: ConsensusModule[P, TX, TData, CData],
   transactionalModule: TransactionalModule[P, TX, TData]): Try[Block[P, TData, CData]] = {

    ???
  }

  def build[P <: Proposition, TX <: Transaction[P, TX], CData <: ConsensusData, TData <: TransactionalData[TX]]
  (consensusData: CData)
  (transactionalData: TData): Block[P, TData, CData] = {

    val timestamp = System.currentTimeMillis()
    new Block(Version, timestamp, consensusData, transactionalData)
  }

  def genesis[P <: Proposition, TX <: Transaction[P, TX], TData <: TransactionalData[TX], CData <: ConsensusData]
  (genesisTimestamp: Long)
  (implicit consensusModule: ConsensusModule[P, TX, TData, CData],
   transactionalModule: TransactionalModule[P, TX, TData]): Block[P, TData, CData] = {

    new Block(Version, genesisTimestamp, consensusModule.genesisData, transactionalModule.genesisData)
  }

  def isValid[P <: Proposition, TX <: Transaction[P, TX], TData <: TransactionalData[TX], CData <: ConsensusData]
  (block: Block[P, TData, CData])
  (implicit consensusModule: ConsensusModule[P, TX, TData, CData],
   transactionalModule: TransactionalModule[P, TX, TData]): Boolean = {

    if (consensusModule.contains(block)) true //applied blocks are valid
    else {
      lazy val consensus = consensusModule.isValid(block)
      lazy val transaction = transactionalModule.isValid(block.transactionalData)

      if (!consensus) log.debug(s"Invalid consensus data in block ${consensusModule.encodedId(block)}")
      else if (!transaction) log.debug(s"Invalid transaction data in block ${consensusModule.encodedId(block)}")

      consensus && transaction
    }
  }
}